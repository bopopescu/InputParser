from __future__ import print_function

try:
    from zookeeper import ZooKeeperException as ZookeeperError
    from .zkpython import ZKClient, ChildrenWatch, DataWatch

    def adjust_zk_logging_level():
        pass
except ImportError:
    from kazoo.client import KazooClient as ZKClient
    from kazoo.recipe.watchers import ChildrenWatch, DataWatch
    from kazoo.exceptions import ZookeeperError

    def adjust_zk_logging_level():
        import logging
        import kazoo
        kazoo.client.log.setLevel(logging.WARNING)
        kazoo.protocol.connection.log.setLevel(logging.WARNING)


class MainDetector(object):

    def __init__(self, uri, agent):
        self.uri = uri
        self.agent = agent
        self.zk = ZKClient(uri, 10)
        self.mainSeq = None

    def choose(self, children):
        children = [child for child in children if child != 'log_replicas']
        if not children:
            self.agent.onNoMainDetectedMessage()
            return True
        mainSeq = min(children)
        if mainSeq == self.mainSeq:
            return True
        self.mainSeq = mainSeq
        DataWatch(self.zk, '/' + mainSeq, self.notify)
        return True

    def notify(self, main_addr, _):
        self.agent.onNewMainDetectedMessage(main_addr)
        return False

    def start(self):
        adjust_zk_logging_level()
        self.zk.start()
        try:
            ChildrenWatch(self.zk, '', self.choose)
        except ZookeeperError:
            self.agent.onNoMainDetectedMessage()
            self.stop()

    def stop(self):
        try:
            self.zk.stop()
        except Exception:
            pass


def test():
    import time
    import logging
    logging.basicConfig()

    class Agent:

        def onNewMainDetectedMessage(self, addr):
            print(('got', addr))

        def onNoMainDetectedMessage(self):
            print('no main')
    d = MainDetector('zk1:2181/mesos_main2', Agent())
    d.start()
    time.sleep(60)
    d.stop()


if __name__ == '__main__':
    test()
